{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Report : Continuous Control\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------------------\n",
    "\n",
    "## Learning Algorithm\n",
    "\n",
    " - My approach for this project is the Deep Deterministic Policy Gradient (DDPG) algorithm, from the idea of this paper:  Continuous control with deep reinforcement learning [https://arxiv.org/abs/1509.02971].\n",
    "\n",
    "\n",
    "### Ornstein-Uhlenbeck process\n",
    "\n",
    "  - An Action-Space-Noise, Ornstein-Uhlenbeck process, is added to change each action probability the agent might take from one time-step to the next. Such noise is correlated to the noise in the previous timestep, and will more likely to stay in the same direction for a period of time without canceling itself. This will allow the arm to explore the action space with more continuity.\n",
    "  \n",
    "  - A decreasing schedule for the Ornstein-Uhlenbeck process is also implemented.\n",
    "  \n",
    "  - For the final successful run, I have chosen the following parameters for the Ornstein-Uhlenbeck process:\n",
    "      - mu (long-running mean): 0\n",
    "      - theta (speed of mean reversion) : 0.08\n",
    "      - sigma (volatility) : 0.1\n",
    "      - epsilon : 0.5\n",
    "      - epsilon_decay : 1e-6\n",
    "\n",
    "\n",
    "### ReplayBuffer\n",
    "\n",
    " - A ReplayBuffer of size 1e6 is used store the agent experiences. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Network architecture\n",
    "\n",
    " - DDPG uses two types of network architectures, actor and critic. To make the network easier to train, we use double networks for both actor and critic. So totally we have 4 networks: actor_local, actor_target, critic_local and critic_target.\n",
    "\n",
    " - Actor Network (both local and target): maps state to action\n",
    "     - State input (33 units)\n",
    "     - Hidden layer (256 units) with ReLU activation and batch normalization\n",
    "     - Hidden layer (256 units) with ReLU activation and batch normalization\n",
    "     - Action output (4 units) with tanh activation\n",
    "\n",
    " - Critic Network (both local and target): maps state and action to Q value\n",
    "     - State input (33 units)\n",
    "     - Hidden layer (256 nodes) with ReLU activation and batch normalization\n",
    "     - Action input (4 units)\n",
    "     - Hidden layer with inputs from layers 2 and 3 (256 nodes) with ReLU activation and batch normalization\n",
    "     - Q-value output (1 node)\n",
    "     \n",
    " During training, **gradient clipping** is also implemented for the Critic network.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Challenges\n",
    "\n",
    "- While working on this project, I realized that the most challenging part (at least for me) is to find the proper parameter set to get the reasonable model.\n",
    "\n",
    "- In the beginning, my model reached mean score ~ 30 around Episode 50. However, when the training reached around Episode 60, the score started to drop, and kept getting worse until the mean score reached 0 again! This was super strange! Because in a traditional supervised learning, I might get a overfit or underfit model, but the score (often the loss) doesn't go up and down like this.\n",
    "\n",
    "- I spent many days kept experimenting different combinations of hyperparameters as well as discussed with my Mentor and peers, but nothing worked! Finally I changed the initial random seed, then model converged in a stable mannner and everything worked like a charm!!! \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f92f9f69470>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "plt.plot(np.arange(1, len(mean_scores)+1), mean_scores, label='Mean of 20 Agents')\n",
    "plt.plot(np.arange(1, len(moving_avgs)+1), moving_avgs, label='Moving Avg of 100 Episodes')\n",
    "plt.ylabel('Score')\n",
    "plt.xlabel('Episode')\n",
    "plt.legend(loc='upper left');\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Future work\n",
    "\n",
    "- While DDPG was not difficult to implement, tuning the parameters to get a good model was not easy. There was a lot of trial and error involved, and hard to find a stable solution. We should also experiment other approaches such as Proximal Policy Optimization (PPO) and Trust Region Policy Optimization (TRPO).\n",
    "\n",
    "- Like in this project, with an unlucky initial random seed, the entire training could get stuck easily in a gradient based optimization method. I recently read this paper: **Deep Neuroevolution: Genetic Algorithms are a Competitive Alternative for Training Deep Neural Networks for Reinforcement Learning** [https://arxiv.org/pdf/1712.06567.pdf]. I like this idea and feel that such approach should less likely depend on the initial random seed and would like to experiment it in the future.\n",
    "\n",
    "- Another interesting paper I read lately is: **Variational Discriminator Bottleneck: Improving Imitation Learning, Inverse RL, and GANs by Constraining Information Flow** [https://arxiv.org/abs/1810.00821]. The idea is to use a discriminator rather than a critic network. Some researches have shown great results using this approach, and I would like to give it a try as well.\n",
    "\n",
    "- Use prioritized experience replay — While selecting experience tuples for training, use prioritized replay to select experiences based on a priority value correlated with the magnitude of error. This should improve learning by increasing the probability that rare and important experience vectors are sampled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

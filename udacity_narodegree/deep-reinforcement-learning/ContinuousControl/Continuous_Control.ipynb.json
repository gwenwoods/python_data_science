{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Continuous Control\n",
    "\n",
    "---\n",
    "\n",
    "You are welcome to use this coding environment to train your agent for the project.  Follow the instructions below to get started!\n",
    "\n",
    "### 1. Start the Environment\n",
    "\n",
    "Run the next code cell to install a few packages.  This line will take a few minutes to run!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mtensorflow 1.7.1 has requirement numpy>=1.13.3, but you'll have numpy 1.12.1 which is incompatible.\u001b[0m\r\n",
      "\u001b[31mipython 6.5.0 has requirement prompt-toolkit<2.0.0,>=1.0.15, but you'll have prompt-toolkit 2.0.9 which is incompatible.\u001b[0m\r\n"
     ]
    }
   ],
   "source": [
    "!pip -q install ./python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The environments corresponding to both versions of the environment are already saved in the Workspace and can be accessed at the file paths provided below.  \n",
    "\n",
    "Please select one of the two options below for loading the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:unityagents:\n",
      "'Academy' started successfully!\n",
      "Unity Academy name: Academy\n",
      "        Number of Brains: 1\n",
      "        Number of External Brains : 1\n",
      "        Lesson number : 0\n",
      "        Reset Parameters :\n",
      "\t\tgoal_speed -> 1.0\n",
      "\t\tgoal_size -> 5.0\n",
      "Unity brain name: ReacherBrain\n",
      "        Number of Visual Observations (per agent): 0\n",
      "        Vector Observation space type: continuous\n",
      "        Vector Observation space size (per agent): 33\n",
      "        Number of stacked Vector Observation: 1\n",
      "        Vector Action space type: continuous\n",
      "        Vector Action space size (per agent): 4\n",
      "        Vector Action descriptions: , , , \n"
     ]
    }
   ],
   "source": [
    "from unityagents import UnityEnvironment\n",
    "import numpy as np\n",
    "\n",
    "# select this option to load version 1 (with a single agent) of the environment\n",
    "# env = UnityEnvironment(file_name='/data/Reacher_One_Linux_NoVis/Reacher_One_Linux_NoVis.x86_64')\n",
    "\n",
    "# select this option to load version 2 (with 20 agents) of the environment\n",
    "env = UnityEnvironment(file_name='/data/Reacher_Linux_NoVis/Reacher.x86_64')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Environments contain **_brains_** which are responsible for deciding the actions of their associated agents. Here we check for the first brain available, and set it as the default brain we will be controlling from Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the default brain\n",
    "brain_name = env.brain_names[0]\n",
    "brain = env.brains[brain_name]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Examine the State and Action Spaces\n",
    "\n",
    "Run the code cell below to print some information about the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of agents: 20\n",
      "Size of each action: 4\n",
      "There are 20 agents. Each observes a state with length: 33\n",
      "The state for the first agent looks like: [  0.00000000e+00  -4.00000000e+00   0.00000000e+00   1.00000000e+00\n",
      "  -0.00000000e+00  -0.00000000e+00  -4.37113883e-08   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00  -1.00000000e+01   0.00000000e+00\n",
      "   1.00000000e+00  -0.00000000e+00  -0.00000000e+00  -4.37113883e-08\n",
      "   0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00   5.75471878e+00  -1.00000000e+00\n",
      "   5.55726624e+00   0.00000000e+00   1.00000000e+00   0.00000000e+00\n",
      "  -1.68164849e-01]\n"
     ]
    }
   ],
   "source": [
    "# reset the environment\n",
    "env_info = env.reset(train_mode=True)[brain_name]\n",
    "\n",
    "# number of agents\n",
    "num_agents = len(env_info.agents)\n",
    "print('Number of agents:', num_agents)\n",
    "\n",
    "# size of each action\n",
    "action_size = brain.vector_action_space_size\n",
    "print('Size of each action:', action_size)\n",
    "\n",
    "# examine the state space \n",
    "states = env_info.vector_observations\n",
    "state_size = states.shape[1]\n",
    "print('There are {} agents. Each observes a state with length: {}'.format(states.shape[0], state_size))\n",
    "print('The state for the first agent looks like:', states[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Take Random Actions in the Environment\n",
    "\n",
    "In the next code cell, you will learn how to use the Python API to control the agent and receive feedback from the environment.\n",
    "\n",
    "Note that **in this coding environment, you will not be able to watch the agents while they are training**, and you should set `train_mode=True` to restart the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total score (averaged over agents) this episode: 0.11199999749660491\n"
     ]
    }
   ],
   "source": [
    "env_info = env.reset(train_mode=True)[brain_name]      # reset the environment    \n",
    "states = env_info.vector_observations                  # get the current state (for each agent)\n",
    "scores = np.zeros(num_agents)                          # initialize the score (for each agent)\n",
    "while True:\n",
    "    actions = np.random.randn(num_agents, action_size) # select an action (for each agent)\n",
    "    actions = np.clip(actions, -1, 1)                  # all actions between -1 and 1\n",
    "    env_info = env.step(actions)[brain_name]           # send all actions to tne environment\n",
    "    next_states = env_info.vector_observations         # get next state (for each agent)\n",
    "    rewards = env_info.rewards                         # get reward (for each agent)\n",
    "    dones = env_info.local_done                        # see if episode finished\n",
    "    scores += env_info.rewards                         # update the score (for each agent)\n",
    "    states = next_states                               # roll over states to next time step\n",
    "    if np.any(dones):                                  # exit loop if episode finished\n",
    "        break\n",
    "print('Total score (averaged over agents) this episode: {}'.format(np.mean(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When finished, you can close the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "env.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. It's Your Turn!\n",
    "\n",
    "Now it's your turn to train your own agent to solve the environment!  A few **important notes**:\n",
    "- When training the environment, set `train_mode=True`, so that the line for resetting the environment looks like the following:\n",
    "```python\n",
    "env_info = env.reset(train_mode=True)[brain_name]\n",
    "```\n",
    "- To structure your work, you're welcome to work directly in this Jupyter notebook, or you might like to start over with a new file!  You can see the list of files in the workspace by clicking on **_Jupyter_** in the top left corner of the notebook.\n",
    "- In this coding environment, you will not be able to watch the agents while they are training.  However, **_after training the agents_**, you can download the saved model weights to watch the agents on your own machine! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import namedtuple, deque\n",
    "import time\n",
    "import torch\n",
    "#import pickle\n",
    "import dill as pickle\n",
    "#from Continuous_Control_Env import Experience\n",
    "from Continuous_Control_Env import ExperienceData\n",
    "\n",
    "def train_agent(n_episodes=500, max_t=1000, consec_episodes=100, train_mode=True,\n",
    "    actor_local = None, actor_target = None, critic_local = None, critic_target = None, score_load_idx = 1):\n",
    "    # Deep Deterministic Policy Gradient (DDPG)\n",
    "    #\n",
    "    #    n_episodes (int)      : maximum number of training episodes\n",
    "    #    max_t (int)           : maximum number of timesteps per episode\n",
    "    #    train_mode (bool)     : if 'True' set environment to training mode\n",
    "    #    solved_score (float)  : min avg score over consecutive episodes\n",
    "    #    consec_episodes (int) : number of consecutive episodes used to calculate score\n",
    "\n",
    "\n",
    "    mean_scores = []                               # list of mean scores from each episode\n",
    "    min_scores = []                                # list of lowest scores from each episode\n",
    "    max_scores = []                                # list of highest scores from each episode\n",
    "    scores_window = deque(maxlen=consec_episodes)  # mean scores from most recent episodes\n",
    "    moving_avgs = []                               # list of moving averages\n",
    "    \n",
    "    # pre-load data from check point: \n",
    "    if (score_load_idx > 1):\n",
    "        with open(\"results_0706/mean_scores_\" + str(score_load_idx) + \".pkl\", \"rb\") as fp_mean:   # Unpickling\n",
    "            mean_scores = pickle.load(fp_mean)\n",
    "        \n",
    "        with open(\"results_0706/min_scores_\" + str(score_load_idx)+ \".pkl\", \"rb\") as fp_min:   # Unpickling\n",
    "            min_scores = pickle.load(fp_min)\n",
    "            \n",
    "            \n",
    "        with open(\"results_0706/max_scores_\" + str(score_load_idx)+ \".pkl\", \"rb\") as fp_max:   # Unpickling\n",
    "            max_scores = pickle.load(fp_max)\n",
    "        \n",
    "        scores_window.extend(mean_scores)\n",
    "        \n",
    "        actor_local = \"results_0706/actor_local_ckpt_\" +  str(score_load_idx) + \".pth\"\n",
    "        agent.actor_local.load_state_dict(torch.load(actor_local))\n",
    "        agent.actor_local.eval()\n",
    "    \n",
    "        actor_target = 'results_0706/actor_target_ckpt_' +  str(score_load_idx) + \".pth\"\n",
    "        agent.actor_target.load_state_dict(torch.load(actor_target))\n",
    "        agent.actor_target.eval()\n",
    "        \n",
    "        critic_local = 'results_0706/critic_local_ckpt_' +  str(score_load_idx) + \".pth\"\n",
    "        agent.critic_local.load_state_dict(torch.load(critic_local))\n",
    "        agent.critic_local.eval()\n",
    "            \n",
    "        \n",
    "        critic_target = 'results_0706/critic_target_ckpt_' +  str(score_load_idx) + \".pth\"\n",
    "        agent.critic_target.load_state_dict(torch.load(critic_target))\n",
    "        agent.critic_target.eval()    \n",
    "\n",
    "        \n",
    "    # start training:\n",
    "    for i_episode in range(score_load_idx + 1, n_episodes+1):\n",
    "        env_info = env.reset(train_mode=train_mode)[brain_name] # reset environment\n",
    "        states = env_info.vector_observations                   # get current state for each agent      \n",
    "        scores = np.zeros(num_agents)                           # initialize score for each agent\n",
    "        agent.reset()\n",
    "        start_time = time.time()\n",
    "        for t in range(max_t):\n",
    "            actions = agent.act(states, add_noise=True)         # select an action\n",
    "            env_info = env.step(actions)[brain_name]            # send actions to environment\n",
    "            next_states = env_info.vector_observations          # get next state\n",
    "            rewards = env_info.rewards                          # get reward\n",
    "            dones = env_info.local_done                         # see if episode has finished\n",
    "            # save experience to replay buffer, perform learning step at defined interval\n",
    "            for state, action, reward, next_state, done in zip(states, actions, rewards, next_states, dones):\n",
    "                agent.step(state, action, reward, next_state, done, t)             \n",
    "            states = next_states\n",
    "            scores += rewards        \n",
    "            if np.any(dones):                                   # exit loop when episode ends\n",
    "                break\n",
    "\n",
    "        duration = time.time() - start_time\n",
    "        min_scores.append(np.min(scores))             # save lowest score for a single agent\n",
    "        max_scores.append(np.max(scores))             # save highest score for a single agent        \n",
    "        mean_scores.append(np.mean(scores))           # save mean score for the episode\n",
    "        scores_window.append(mean_scores[-1])         # save mean score to window\n",
    "        moving_avgs.append(np.mean(scores_window))    # save moving average\n",
    "        \n",
    "        print('\\rEpisode {} ({} sec)  -- \\tMin: {:.1f}\\tMax: {:.1f}\\tMean: {:.1f}\\tMov. Avg: {:.1f}'.format(\\\n",
    "                  i_episode, round(duration), min_scores[-1], max_scores[-1], mean_scores[-1], moving_avgs[-1]))\n",
    "        \n",
    "        if (i_episode%10 == 0):\n",
    "            actor_local = 'results_0706/actor_local_ckpt_' +  str(i_episode) + \".pth\"\n",
    "            torch.save(agent.actor_local.state_dict(), actor_local)\n",
    "            actor_target = 'results_0706/actor_target_ckpt_' +  str(i_episode) + \".pth\"\n",
    "            torch.save(agent.actor_target.state_dict(), actor_target)\n",
    "            \n",
    "            critic_local = 'results_0706/critic_local_ckpt_' +  str(i_episode) + \".pth\"\n",
    "            torch.save(agent.critic_local.state_dict(), critic_local)\n",
    "            critic_target = 'results_0706/critic_target_ckpt_' +  str(i_episode) + \".pth\"\n",
    "            torch.save(agent.critic_target.state_dict(), critic_target)\n",
    "            \n",
    "            with open(\"results_0706/mean_scores_\" + str(i_episode) + \".pkl\", \"wb\") as fp_i_mean:   #Pickling\n",
    "                pickle.dump(mean_scores, fp_i_mean)\n",
    "            \n",
    "            with open(\"results_0706/min_scores_\" + str(i_episode) + \".pkl\", \"wb\") as fp_i_min:   #Pickling\n",
    "                pickle.dump(min_scores, fp_i_min)\n",
    "                \n",
    "            with open(\"results_0706/max_scores_\" + str(i_episode) + \".pkl\", \"wb\") as fp_i_max:   #Pickling\n",
    "                pickle.dump(max_scores, fp_i_max)\n",
    "                \n",
    "            with open(\"results_0706/memory_\" + str(i_episode) + \".pkl\", \"wb\") as fp_i_memory:   #Pickling\n",
    "                pickle.dump(agent.memory.memory_buffer, fp_i_memory)\n",
    "        \n",
    "        if moving_avgs[-1] >= 30.0 and i_episode >= consec_episodes:\n",
    "            print('\\nEnvironment SOLVED in {} episodes!\\tMoving Average ={:.1f} over last {} episodes'.format(\\\n",
    "                                    i_episode-consec_episodes, moving_avgs[-1], consec_episodes))            \n",
    "            if train_mode:\n",
    "                torch.save(agent.actor_local.state_dict(), 'actor_ckpt_final.pth')\n",
    "                torch.save(agent.critic_local.state_dict(), 'critic_ckpt_final.pth')  \n",
    "            break\n",
    "            \n",
    "    return mean_scores, moving_avgs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 20 Agents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:unityagents:\n",
      "'Academy' started successfully!\n",
      "Unity Academy name: Academy\n",
      "        Number of Brains: 1\n",
      "        Number of External Brains : 1\n",
      "        Lesson number : 0\n",
      "        Reset Parameters :\n",
      "\t\tgoal_speed -> 1.0\n",
      "\t\tgoal_size -> 5.0\n",
      "Unity brain name: ReacherBrain\n",
      "        Number of Visual Observations (per agent): 0\n",
      "        Vector Observation space type: continuous\n",
      "        Vector Observation space size (per agent): 33\n",
      "        Number of stacked Vector Observation: 1\n",
      "        Vector Action space type: continuous\n",
      "        Vector Action space size (per agent): 4\n",
      "        Vector Action descriptions: , , , \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of agents: 20\n",
      "Size of each action: 4\n",
      "There are 20 agents. Each observes a state with length: 33\n",
      "The state for the first agent looks like: [  0.00000000e+00  -4.00000000e+00   0.00000000e+00   1.00000000e+00\n",
      "  -0.00000000e+00  -0.00000000e+00  -4.37113883e-08   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00  -1.00000000e+01   0.00000000e+00\n",
      "   1.00000000e+00  -0.00000000e+00  -0.00000000e+00  -4.37113883e-08\n",
      "   0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "   0.00000000e+00   0.00000000e+00   5.75471878e+00  -1.00000000e+00\n",
      "   5.55726624e+00   0.00000000e+00   1.00000000e+00   0.00000000e+00\n",
      "  -1.68164849e-01]\n"
     ]
    }
   ],
   "source": [
    "from unityagents import UnityEnvironment\n",
    "import numpy as np\n",
    "\n",
    "# select this option to load version 1 (with a single agent) of the environment\n",
    "# env = UnityEnvironment(file_name='/data/Reacher_One_Linux_NoVis/Reacher_One_Linux_NoVis.x86_64')\n",
    "\n",
    "# select this option to load version 2 (with 20 agents) of the environment\n",
    "env = UnityEnvironment(file_name='/data/Reacher_Linux_NoVis/Reacher.x86_64')\n",
    "\n",
    "# get the default brain\n",
    "brain_name = env.brain_names[0]\n",
    "brain = env.brains[brain_name]\n",
    "\n",
    "# reset the environment\n",
    "env_info = env.reset(train_mode=True)[brain_name]\n",
    "\n",
    "# number of agents\n",
    "num_agents = len(env_info.agents)\n",
    "print('Number of agents:', num_agents)\n",
    "\n",
    "# size of each action\n",
    "action_size = brain.vector_action_space_size\n",
    "print('Size of each action:', action_size)\n",
    "\n",
    "# examine the state space \n",
    "states = env_info.vector_observations\n",
    "state_size = states.shape[1]\n",
    "print('There are {} agents. Each observes a state with length: {}'.format(states.shape[0], state_size))\n",
    "print('The state for the first agent looks like:', states[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Episode 1 (60 sec)  -- \tMin: 0.1\tMax: 1.5\tMean: 0.5\tMov. Avg: 0.5\n",
      "Episode 2 (60 sec)  -- \tMin: 0.1\tMax: 2.1\tMean: 0.7\tMov. Avg: 0.6\n",
      "Episode 3 (60 sec)  -- \tMin: 0.0\tMax: 2.1\tMean: 0.9\tMov. Avg: 0.7\n",
      "Episode 4 (61 sec)  -- \tMin: 0.6\tMax: 3.2\tMean: 1.7\tMov. Avg: 1.0\n",
      "Episode 5 (62 sec)  -- \tMin: 0.9\tMax: 3.1\tMean: 2.0\tMov. Avg: 1.2\n",
      "Episode 6 (62 sec)  -- \tMin: 1.1\tMax: 5.2\tMean: 2.7\tMov. Avg: 1.4\n",
      "Episode 7 (62 sec)  -- \tMin: 1.6\tMax: 5.9\tMean: 3.5\tMov. Avg: 1.7\n",
      "Episode 8 (63 sec)  -- \tMin: 1.3\tMax: 6.2\tMean: 3.5\tMov. Avg: 1.9\n",
      "Episode 9 (63 sec)  -- \tMin: 1.4\tMax: 6.5\tMean: 3.9\tMov. Avg: 2.2\n",
      "Episode 10 (64 sec)  -- \tMin: 1.7\tMax: 6.1\tMean: 3.4\tMov. Avg: 2.3\n",
      "Episode 11 (64 sec)  -- \tMin: 2.6\tMax: 8.4\tMean: 4.6\tMov. Avg: 2.5\n",
      "Episode 12 (65 sec)  -- \tMin: 2.4\tMax: 6.8\tMean: 4.5\tMov. Avg: 2.7\n",
      "Episode 13 (66 sec)  -- \tMin: 3.0\tMax: 8.5\tMean: 5.2\tMov. Avg: 2.9\n",
      "Episode 14 (67 sec)  -- \tMin: 2.5\tMax: 10.6\tMean: 5.1\tMov. Avg: 3.0\n",
      "Episode 15 (68 sec)  -- \tMin: 2.2\tMax: 9.5\tMean: 6.1\tMov. Avg: 3.2\n",
      "Episode 16 (69 sec)  -- \tMin: 2.1\tMax: 9.5\tMean: 5.9\tMov. Avg: 3.4\n",
      "Episode 17 (70 sec)  -- \tMin: 2.8\tMax: 10.1\tMean: 6.7\tMov. Avg: 3.6\n",
      "Episode 18 (71 sec)  -- \tMin: 2.9\tMax: 11.0\tMean: 7.2\tMov. Avg: 3.8\n",
      "Episode 19 (72 sec)  -- \tMin: 3.5\tMax: 12.1\tMean: 8.2\tMov. Avg: 4.0\n",
      "Episode 20 (73 sec)  -- \tMin: 1.6\tMax: 12.0\tMean: 7.6\tMov. Avg: 4.2\n",
      "Episode 21 (74 sec)  -- \tMin: 4.1\tMax: 19.3\tMean: 11.2\tMov. Avg: 4.5\n",
      "Episode 22 (75 sec)  -- \tMin: 4.1\tMax: 15.5\tMean: 10.9\tMov. Avg: 4.8\n",
      "Episode 23 (76 sec)  -- \tMin: 6.9\tMax: 23.7\tMean: 12.9\tMov. Avg: 5.2\n",
      "Episode 24 (77 sec)  -- \tMin: 6.5\tMax: 16.6\tMean: 10.2\tMov. Avg: 5.4\n",
      "Episode 25 (79 sec)  -- \tMin: 2.0\tMax: 16.4\tMean: 11.3\tMov. Avg: 5.6\n",
      "Episode 26 (80 sec)  -- \tMin: 3.5\tMax: 18.9\tMean: 11.5\tMov. Avg: 5.8\n",
      "Episode 27 (81 sec)  -- \tMin: 5.6\tMax: 25.3\tMean: 14.0\tMov. Avg: 6.1\n",
      "Episode 28 (83 sec)  -- \tMin: 8.8\tMax: 18.9\tMean: 15.2\tMov. Avg: 6.5\n",
      "Episode 29 (84 sec)  -- \tMin: 11.4\tMax: 21.2\tMean: 15.9\tMov. Avg: 6.8\n",
      "Episode 30 (85 sec)  -- \tMin: 8.3\tMax: 23.5\tMean: 14.3\tMov. Avg: 7.0\n",
      "Episode 31 (86 sec)  -- \tMin: 7.2\tMax: 21.5\tMean: 14.4\tMov. Avg: 7.3\n",
      "Episode 32 (87 sec)  -- \tMin: 7.5\tMax: 23.4\tMean: 15.1\tMov. Avg: 7.5\n",
      "Episode 33 (88 sec)  -- \tMin: 10.4\tMax: 21.3\tMean: 16.0\tMov. Avg: 7.8\n",
      "Episode 34 (89 sec)  -- \tMin: 6.2\tMax: 23.6\tMean: 16.0\tMov. Avg: 8.0\n",
      "Episode 35 (90 sec)  -- \tMin: 7.7\tMax: 23.3\tMean: 15.9\tMov. Avg: 8.2\n",
      "Episode 36 (92 sec)  -- \tMin: 10.5\tMax: 20.5\tMean: 16.6\tMov. Avg: 8.5\n",
      "Episode 37 (93 sec)  -- \tMin: 11.9\tMax: 25.4\tMean: 18.0\tMov. Avg: 8.7\n",
      "Episode 38 (94 sec)  -- \tMin: 10.8\tMax: 23.6\tMean: 17.4\tMov. Avg: 9.0\n",
      "Episode 39 (95 sec)  -- \tMin: 10.2\tMax: 24.4\tMean: 16.8\tMov. Avg: 9.2\n",
      "Episode 40 (97 sec)  -- \tMin: 9.1\tMax: 22.1\tMean: 16.0\tMov. Avg: 9.3\n",
      "Episode 41 (98 sec)  -- \tMin: 11.6\tMax: 30.7\tMean: 17.2\tMov. Avg: 9.5\n",
      "Episode 42 (99 sec)  -- \tMin: 8.6\tMax: 25.1\tMean: 18.7\tMov. Avg: 9.7\n",
      "Episode 43 (100 sec)  -- \tMin: 12.2\tMax: 30.5\tMean: 22.4\tMov. Avg: 10.0\n",
      "Episode 44 (101 sec)  -- \tMin: 9.5\tMax: 27.7\tMean: 19.9\tMov. Avg: 10.3\n",
      "Episode 45 (102 sec)  -- \tMin: 10.0\tMax: 30.2\tMean: 21.2\tMov. Avg: 10.5\n",
      "Episode 46 (104 sec)  -- \tMin: 13.3\tMax: 28.0\tMean: 22.0\tMov. Avg: 10.8\n",
      "Episode 47 (105 sec)  -- \tMin: 14.4\tMax: 33.5\tMean: 22.9\tMov. Avg: 11.0\n",
      "Episode 48 (106 sec)  -- \tMin: 11.9\tMax: 28.9\tMean: 21.5\tMov. Avg: 11.2\n",
      "Episode 49 (107 sec)  -- \tMin: 15.7\tMax: 32.0\tMean: 23.7\tMov. Avg: 11.5\n",
      "Episode 50 (108 sec)  -- \tMin: 11.1\tMax: 29.4\tMean: 23.3\tMov. Avg: 11.7\n",
      "Episode 51 (109 sec)  -- \tMin: 18.5\tMax: 30.5\tMean: 25.2\tMov. Avg: 12.0\n",
      "Episode 52 (108 sec)  -- \tMin: 17.0\tMax: 35.4\tMean: 25.7\tMov. Avg: 12.3\n",
      "Episode 53 (109 sec)  -- \tMin: 9.8\tMax: 32.1\tMean: 24.3\tMov. Avg: 12.5\n",
      "Episode 54 (108 sec)  -- \tMin: 11.9\tMax: 30.4\tMean: 25.2\tMov. Avg: 12.7\n",
      "Episode 55 (109 sec)  -- \tMin: 10.6\tMax: 32.2\tMean: 24.4\tMov. Avg: 12.9\n",
      "Episode 56 (108 sec)  -- \tMin: 8.3\tMax: 32.8\tMean: 24.1\tMov. Avg: 13.1\n",
      "Episode 57 (109 sec)  -- \tMin: 14.2\tMax: 32.5\tMean: 27.7\tMov. Avg: 13.4\n",
      "Episode 58 (109 sec)  -- \tMin: 16.3\tMax: 35.4\tMean: 29.0\tMov. Avg: 13.7\n",
      "Episode 59 (109 sec)  -- \tMin: 21.4\tMax: 36.5\tMean: 30.6\tMov. Avg: 13.9\n",
      "Episode 60 (109 sec)  -- \tMin: 21.5\tMax: 37.9\tMean: 31.1\tMov. Avg: 14.2\n",
      "Episode 61 (109 sec)  -- \tMin: 23.9\tMax: 39.1\tMean: 32.2\tMov. Avg: 14.5\n",
      "Episode 62 (109 sec)  -- \tMin: 22.2\tMax: 39.1\tMean: 33.7\tMov. Avg: 14.8\n",
      "Episode 63 (109 sec)  -- \tMin: 23.1\tMax: 39.4\tMean: 32.0\tMov. Avg: 15.1\n",
      "Episode 64 (109 sec)  -- \tMin: 21.3\tMax: 37.0\tMean: 30.8\tMov. Avg: 15.3\n",
      "Episode 65 (109 sec)  -- \tMin: 21.7\tMax: 39.4\tMean: 31.1\tMov. Avg: 15.6\n",
      "Episode 66 (109 sec)  -- \tMin: 23.3\tMax: 35.7\tMean: 32.3\tMov. Avg: 15.8\n",
      "Episode 67 (109 sec)  -- \tMin: 23.6\tMax: 38.7\tMean: 34.4\tMov. Avg: 16.1\n",
      "Episode 68 (110 sec)  -- \tMin: 19.6\tMax: 37.1\tMean: 32.4\tMov. Avg: 16.4\n",
      "Episode 69 (109 sec)  -- \tMin: 23.9\tMax: 37.4\tMean: 32.6\tMov. Avg: 16.6\n",
      "Episode 70 (110 sec)  -- \tMin: 27.8\tMax: 37.0\tMean: 32.7\tMov. Avg: 16.8\n",
      "Episode 71 (110 sec)  -- \tMin: 28.5\tMax: 39.5\tMean: 34.4\tMov. Avg: 17.1\n",
      "Episode 72 (110 sec)  -- \tMin: 25.1\tMax: 39.0\tMean: 34.4\tMov. Avg: 17.3\n",
      "Episode 73 (109 sec)  -- \tMin: 26.6\tMax: 38.8\tMean: 34.0\tMov. Avg: 17.5\n",
      "Episode 74 (109 sec)  -- \tMin: 26.1\tMax: 37.7\tMean: 32.5\tMov. Avg: 17.7\n",
      "Episode 75 (109 sec)  -- \tMin: 25.5\tMax: 37.1\tMean: 33.7\tMov. Avg: 18.0\n",
      "Episode 76 (109 sec)  -- \tMin: 27.9\tMax: 37.8\tMean: 34.3\tMov. Avg: 18.2\n",
      "Episode 77 (109 sec)  -- \tMin: 30.5\tMax: 39.4\tMean: 35.5\tMov. Avg: 18.4\n",
      "Episode 78 (110 sec)  -- \tMin: 28.9\tMax: 39.3\tMean: 34.8\tMov. Avg: 18.6\n",
      "Episode 79 (110 sec)  -- \tMin: 32.4\tMax: 38.4\tMean: 34.9\tMov. Avg: 18.8\n",
      "Episode 80 (110 sec)  -- \tMin: 31.1\tMax: 39.2\tMean: 35.6\tMov. Avg: 19.0\n",
      "Episode 81 (109 sec)  -- \tMin: 32.2\tMax: 39.5\tMean: 36.2\tMov. Avg: 19.2\n",
      "Episode 82 (110 sec)  -- \tMin: 32.6\tMax: 38.6\tMean: 36.3\tMov. Avg: 19.4\n",
      "Episode 83 (110 sec)  -- \tMin: 32.1\tMax: 38.5\tMean: 35.7\tMov. Avg: 19.6\n",
      "Episode 84 (110 sec)  -- \tMin: 32.7\tMax: 39.5\tMean: 36.0\tMov. Avg: 19.8\n",
      "Episode 85 (110 sec)  -- \tMin: 34.3\tMax: 39.5\tMean: 37.2\tMov. Avg: 20.0\n",
      "Episode 86 (110 sec)  -- \tMin: 32.2\tMax: 39.3\tMean: 36.9\tMov. Avg: 20.2\n",
      "Episode 87 (110 sec)  -- \tMin: 33.1\tMax: 39.5\tMean: 37.3\tMov. Avg: 20.4\n",
      "Episode 88 (110 sec)  -- \tMin: 32.7\tMax: 39.6\tMean: 37.4\tMov. Avg: 20.6\n",
      "Episode 89 (110 sec)  -- \tMin: 33.0\tMax: 39.3\tMean: 36.8\tMov. Avg: 20.8\n",
      "Episode 90 (110 sec)  -- \tMin: 34.8\tMax: 39.5\tMean: 38.0\tMov. Avg: 21.0\n",
      "Episode 91 (110 sec)  -- \tMin: 35.6\tMax: 39.6\tMean: 37.9\tMov. Avg: 21.2\n",
      "Episode 92 (110 sec)  -- \tMin: 31.9\tMax: 39.6\tMean: 37.7\tMov. Avg: 21.4\n",
      "Episode 93 (109 sec)  -- \tMin: 34.5\tMax: 39.6\tMean: 37.6\tMov. Avg: 21.5\n",
      "Episode 94 (110 sec)  -- \tMin: 35.9\tMax: 39.6\tMean: 38.5\tMov. Avg: 21.7\n",
      "Episode 95 (110 sec)  -- \tMin: 33.9\tMax: 39.6\tMean: 38.5\tMov. Avg: 21.9\n",
      "Episode 96 (109 sec)  -- \tMin: 28.8\tMax: 39.6\tMean: 36.9\tMov. Avg: 22.1\n",
      "Episode 97 (110 sec)  -- \tMin: 34.3\tMax: 39.6\tMean: 38.2\tMov. Avg: 22.2\n",
      "Episode 98 (110 sec)  -- \tMin: 36.0\tMax: 39.5\tMean: 38.7\tMov. Avg: 22.4\n",
      "Episode 99 (110 sec)  -- \tMin: 34.6\tMax: 39.6\tMean: 38.3\tMov. Avg: 22.5\n",
      "Episode 100 (110 sec)  -- \tMin: 36.0\tMax: 39.6\tMean: 38.9\tMov. Avg: 22.7\n",
      "Episode 101 (109 sec)  -- \tMin: 37.6\tMax: 39.6\tMean: 39.1\tMov. Avg: 23.1\n",
      "Episode 102 (110 sec)  -- \tMin: 36.8\tMax: 39.6\tMean: 38.4\tMov. Avg: 23.5\n",
      "Episode 103 (109 sec)  -- \tMin: 30.6\tMax: 39.5\tMean: 37.5\tMov. Avg: 23.8\n",
      "Episode 104 (109 sec)  -- \tMin: 36.0\tMax: 39.6\tMean: 38.3\tMov. Avg: 24.2\n",
      "Episode 105 (109 sec)  -- \tMin: 33.9\tMax: 39.2\tMean: 37.4\tMov. Avg: 24.6\n",
      "Episode 106 (109 sec)  -- \tMin: 34.1\tMax: 39.6\tMean: 38.5\tMov. Avg: 24.9\n",
      "Episode 107 (109 sec)  -- \tMin: 37.2\tMax: 39.6\tMean: 38.7\tMov. Avg: 25.3\n",
      "Episode 108 (109 sec)  -- \tMin: 34.9\tMax: 39.6\tMean: 38.3\tMov. Avg: 25.6\n",
      "Episode 109 (109 sec)  -- \tMin: 37.1\tMax: 39.6\tMean: 39.0\tMov. Avg: 26.0\n",
      "Episode 110 (109 sec)  -- \tMin: 36.7\tMax: 39.7\tMean: 39.0\tMov. Avg: 26.3\n",
      "Episode 111 (109 sec)  -- \tMin: 36.2\tMax: 39.6\tMean: 38.9\tMov. Avg: 26.7\n",
      "Episode 112 (109 sec)  -- \tMin: 36.9\tMax: 39.5\tMean: 38.7\tMov. Avg: 27.0\n",
      "Episode 113 (110 sec)  -- \tMin: 35.6\tMax: 39.6\tMean: 38.6\tMov. Avg: 27.3\n",
      "Episode 114 (110 sec)  -- \tMin: 34.8\tMax: 39.6\tMean: 37.4\tMov. Avg: 27.7\n",
      "Episode 115 (109 sec)  -- \tMin: 36.1\tMax: 39.6\tMean: 38.5\tMov. Avg: 28.0\n",
      "Episode 116 (109 sec)  -- \tMin: 37.5\tMax: 39.5\tMean: 38.8\tMov. Avg: 28.3\n",
      "Episode 117 (109 sec)  -- \tMin: 34.6\tMax: 39.6\tMean: 38.1\tMov. Avg: 28.6\n",
      "Episode 118 (109 sec)  -- \tMin: 34.5\tMax: 39.6\tMean: 38.2\tMov. Avg: 28.9\n",
      "Episode 119 (109 sec)  -- \tMin: 35.1\tMax: 39.6\tMean: 38.6\tMov. Avg: 29.2\n",
      "Episode 120 (110 sec)  -- \tMin: 35.3\tMax: 39.6\tMean: 38.0\tMov. Avg: 29.5\n",
      "Episode 121 (110 sec)  -- \tMin: 35.7\tMax: 39.6\tMean: 38.3\tMov. Avg: 29.8\n",
      "Episode 122 (110 sec)  -- \tMin: 35.9\tMax: 39.6\tMean: 38.6\tMov. Avg: 30.1\n",
      "\n",
      "Environment SOLVED in 22 episodes!\tMoving Average =30.1 over last 100 episodes\n"
     ]
    }
   ],
   "source": [
    "from Continuous_Control_Env import DDPG_Agent\n",
    "\n",
    "\n",
    "# run the training loop\n",
    "agent = DDPG_Agent(state_size=state_size, action_size=action_size, memory_name=None, random_seed=1)\n",
    "mean_scores, moving_avgs = train_agent(score_load_idx = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dill as pickle\n",
    "\n",
    "score_load_idx = 120\n",
    "with open(\"results_0706/mean_scores_\" + str(score_load_idx) + \".pkl\", \"rb\") as fp_mean:   # Unpickling\n",
    "    mean_scores = pickle.load(fp_mean)\n",
    "    \n",
    "mean_scores.append(38.3)\n",
    "mean_scores.append(38.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f92f9f69470>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "plt.plot(np.arange(1, len(mean_scores)+1), mean_scores, label='Mean of 20 Agents')\n",
    "plt.plot(np.arange(1, len(moving_avgs)+1), moving_avgs, label='Moving Avg of 100 Episodes')\n",
    "plt.ylabel('Score')\n",
    "plt.xlabel('Episode')\n",
    "plt.legend(loc='upper left');\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "env.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
